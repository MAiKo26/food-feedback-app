/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/vEcadjNCsIq
 */
import {Button} from "@/components/ui/button";
import {Badge} from "@/components/ui/badge";
import Link from "next/link";
import {CardContent, Card} from "@/components/ui/card";
import {useEffect, useState} from "react";

export function UpvoteComponent({items, setItems}: any) {
  const items2 = items.slice().sort((a: any, b: any) => b.score - a.score);

  // Initialize votedArray from localStorage or with all false values
  const initialVotedArray = JSON.parse(
    (typeof window !== "undefined" && localStorage.getItem("votedArray")) ||
      "[]"
  );
  const [votedArray, setVotedArray] = useState<boolean[]>(initialVotedArray);

  const handleUpvote = async (index: number) => {
    if (votedArray[index]) {
      return;
    }

    // Create a new array with the updated score
    const updatedItems = [...items];
    updatedItems[index] = {...items[index], score: items[index].score + 1};

    // Use setItems to update the entire items array
    setItems(updatedItems);

    try {
      const response = await fetch("/api/item", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedItems[index]),
      });

      if (response.ok) {
        console.log("Data modified successfully!");
        // You can perform additional actions here after successful submission
      } else {
        console.error("Failed to modify data. Status:", response.status);
        // You can handle error cases here
      }
    } catch (error) {
      console.error("An error occurred:", error);
      // Handle other types of errors here
    }

    // Update votedArray in state and localStorage
    setVotedArray((prevVotedArray) => {
      const updatedVotedArray = [...prevVotedArray];
      updatedVotedArray[index] = true;
      localStorage.setItem("votedArray", JSON.stringify(updatedVotedArray));
      return updatedVotedArray;
    });
  };

  const handleDownvote = async (index: number) => {
    if (votedArray[index]) {
      return;
    }

    // Create a new array with the updated score
    const updatedItems = [...items];
    updatedItems[index] = {...items[index], score: items[index].score - 1};

    // Use setItems to update the entire items array
    setItems(updatedItems);

    try {
      const response = await fetch("/api/item", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(updatedItems[index]),
      });

      if (response.ok) {
        console.log("Data modified successfully!");
        // You can perform additional actions here after successful submission
      } else {
        console.error("Failed to modify data. Status:", response.status);
        // You can handle error cases here
      }
    } catch (error) {
      console.error("An error occurred:", error);
      // Handle other types of errors here
    }

    // Update votedArray in state and localStorage
    setVotedArray((prevVotedArray) => {
      const updatedVotedArray = [...prevVotedArray];
      updatedVotedArray[index] = true;
      localStorage.setItem("votedArray", JSON.stringify(updatedVotedArray));
      return updatedVotedArray;
    });
  };

  return items2.map((item: any, index: number) => (
    <Card className="p-4 mb-4 border-gray-200 shadow-lg" key={index}>
      <CardContent className="flex flex-row gap-4 justify-start items-center">
        <div className="flex flex-col items-center">
          <Button
            className="mb-2"
            variant="outline"
            onClick={() => {
              handleUpvote(index);
              setVotedArray((prevVotedArray) => {
                const updatedVotedArray = [...prevVotedArray];
                updatedVotedArray[index] = true;
                return updatedVotedArray;
              });
            }}
            disabled={votedArray[index]}
          >
            <ArrowUpIcon className="w-4 h-4" />
          </Button>
          <Badge className="mb-2 flex h-6 w-6 shrink-0 items-center justify-center rounded-full">
            {item.score}
          </Badge>
          <Button
            variant="outline"
            onClick={() => {
              handleDownvote(index);
              setVotedArray((prevVotedArray) => {
                const updatedVotedArray = [...prevVotedArray];
                updatedVotedArray[index] = true;
                return updatedVotedArray;
              });
            }}
            disabled={votedArray[index]}
          >
            <ArrowDownIcon className="w-4 h-4" />
          </Button>
        </div>

        <h1 className="text-6xl flex justify-center items-center">
          {item.suggestion}
        </h1>
      </CardContent>
    </Card>
  ));
}

function ArrowUpIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m5 12 7-7 7 7" />
      <path d="M12 19V5" />
    </svg>
  );
}

function ArrowDownIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M12 5v14" />
      <path d="m19 12-7 7-7-7" />
    </svg>
  );
}
